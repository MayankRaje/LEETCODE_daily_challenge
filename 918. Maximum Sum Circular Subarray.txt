class Solution {
    public int maxSubarraySumCircular(int[] nums) {
        int sum=0;int n=nums.length;
        for(int i:nums){
            sum+=i;
        }
        int case1=max_kadane(nums,n);
        int case2=sum-min_kadane(nums,n);

        if(case1>0)
        return (int)Math.max(case1,case2);

      
        return case1;

    }
    private int min_kadane(int[]nums,int n){
        int sum=nums[0];
        int minSum=nums[0];
        for(int i=1;i<n;i++){
            sum=Math.min(sum+nums[i],nums[i]);
            minSum=Math.min(minSum,sum);
        }
        return minSum;
    }
    private int max_kadane(int[]nums,int n){
        int sum=nums[0];
        int maxSum=nums[0];
        for(int i=1;i<n;i++){
            sum=Math.max(sum+nums[i],nums[i]);
            maxSum=Math.max(maxSum,sum);
        }
        return maxSum;
    }
}